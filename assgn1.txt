Question1: 

	- programmers do not have better choices for certain domains
	- programmers has no chance to improve their language background
	- decrease programmers ability to learn another language
	- can be more expensive 
		- might cost programmers extra coding time 
		- might cost more time to compile programs
		- might cost more time to execute programs
	- can reduce the writability:
		- there might be lots of commands and the code could be really complicated
	- can reduce the readability: 
		- other programmers might found it hard to understand
		- the structure would be hard to read by machines due to its complexity
	- can reduce the reliability:
		- errors are more likely to occur


Question2:

	- programmers can focus on learning one language 
	- reduce programmers' cost to learn a new language 
	- programmers do not have to choose languages 
	- might increase the re-usage of code 
	- do not need different compliers 
	- do not need different IDEs 

Question3: 
	efficiency:
	     a broad term to depict the language's reliability, cost and methodology
	safety:
	     a broad term to depict a language that distinguishes units of data by type, they have operation rule for different certain types and they do not allow mutual use.

	trade-off:
	- example1: if firstly define x = "b", then x = 1, python allows type change from string to int, which reduce the safety(type-error are more likely to occur), but increase python's flexibility, thus increase the efficiency.
	- example2: if define x="1", y=2, python does not allow x+y to execute because of a type-error, which ensure its safety, but at the same time decrease the efficiency.


Question4:

	in my opinion, I prefer the first method with a special terminator symbol that denotes the end of every statement. Using a terminator at end of every statement makes me feel the codes are more organised and logical, and the complier could read and understand the codes better(more readability). Terminators could also avoid some syntax errors, and can report where some errors occurred easily. However, it costs more work for the programmers, which is a trade-off.

	from my point of view, python does use terminators, but those terminators require no work for the programmers. If python do not use terminator symbols to run, then python has no reference to see when do these statements ends, everything will be in a mess, which will cause syntax error. This is not true. Python has invisible terminators, programmers use structures(spaces, change lines, indentations, etc.) to indicate where are the ends of these commands(the "terminators").

Question5:Indentation in Python.

   positives: 
   python uses indentation to indicate a block of code, it organised the codes hierarchically and thus the code is understandable. It increase the readability and reliability.

   negatives: 
   If indentations are not used by python's rules, errors may occur. For instance, if you are using the wrong number of spaces for codes in the same block, it reports an error. Besides, it needs programmers to put efforts in doing indentations. As a conclusion, for negatives, indentations in python reduces the flexibility and writability, and increase the cost of writing the program.


Question6: unix notation for regular expressions

	(1) ^[0-9][0-9]*$
	(2)  ^(0|([1-9][0-9]*))$
	(3) ^(0|[1-9][0-9]*)[.][0-9][0-9]*$
	(4) ^(0?|[1-9][0-9]*)[.][0-9]*$










